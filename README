<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vendor Management Form</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .multi-select-dropdown {
            position: relative;
        }
        .dropdown-options {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            z-index: 10;
            max-height: 200px;
            overflow-y: auto;
        }
        .dropdown-options.active {
            display: block;
        }
        .selected-options {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        .selected-option {
            display: flex;
            align-items: center;
            background-color: #e5e7eb;
            border-radius: 0.375rem;
            padding: 0.25rem 0.5rem;
        }
        .selected-option button {
            margin-left: 0.5rem;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h1 class="text-2xl font-bold mb-6 text-gray-800">Vendor Management Form</h1>
            
            <form id="vendorForm" class="space-y-6">
                <!-- Basic Details Section -->
                <div class="border-b pb-4">
                    <h2 class="text-xl font-semibold mb-4 text-gray-700">Basic Details</h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="vendorName" class="block text-sm font-medium text-gray-700 mb-1">Vendor Name<span class="text-red-500">*</span></label>
                            <input type="text" id="vendorName" name="vendorName" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        
                        <div>
                            <label for="officeLocation" class="block text-sm font-medium text-gray-700 mb-1">Office Location<span class="text-red-500">*</span></label>
                            <input type="text" id="officeLocation" name="officeLocation" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        
                        <div>
                            <label for="contactNumber" class="block text-sm font-medium text-gray-700 mb-1">Person Contact Number<span class="text-red-500">*</span></label>
                            <input type="tel" id="contactNumber" name="contactNumber" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        
                        <div>
                            <label for="alternateNumber" class="block text-sm font-medium text-gray-700 mb-1">Alternate Number</label>
                            <input type="tel" id="alternateNumber" name="alternateNumber" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        
                        <div>
                            <label for="scanPodNumber" class="block text-sm font-medium text-gray-700 mb-1">Scan Pod Number</label>
                            <input type="text" id="scanPodNumber" name="scanPodNumber" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        
                        <div>
                            <label for="accountantNumber" class="block text-sm font-medium text-gray-700 mb-1">Accountant Number</label>
                            <input type="tel" id="accountantNumber" name="accountantNumber" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Vendor Status<span class="text-red-500">*</span></label>
                            <div class="grid grid-cols-2 gap-4">
                                <div class="flex items-center">
                                    <input type="radio" id="statusNormal" name="vendorStatus" value="Normal" checked class="mr-2">
                                    <label for="statusNormal" class="text-gray-700">Normal</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="radio" id="statusBlacklist" name="vendorStatus" value="Blacklist" class="mr-2">
                                    <label for="statusBlacklist" class="text-gray-700">Blacklist</label>
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <label for="vehicleType" class="block text-sm font-medium text-gray-700 mb-1">Vehicle Type<span class="text-red-500">*</span></label>
                            <div class="relative multi-select-dropdown">
                                <div class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 cursor-pointer flex items-center justify-between" id="vehicleTypeDropdown">
                                    <div class="selected-options" id="selectedVehicleTypes"></div>
                                    <span class="text-gray-400 ml-2" id="vehicleTypePlaceholder">Select vehicle types</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="dropdown-options bg-white border border-gray-300 rounded-md mt-1 shadow-lg" id="vehicleTypeOptions">
                                    <div class="p-2">
                                        <input type="text" placeholder="Search..." class="w-full px-2 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 mb-2">
                                        <div class="options-container">
                                            <!-- Vehicle type options will be inserted here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Location Section -->
                <div>
                    <h2 class="text-xl font-semibold mb-4 text-gray-700">Location</h2>
                    
                    <div class="space-y-6">
                        <div>
                            <label for="fromLocation1" class="block text-sm font-medium text-gray-700 mb-1">From 1<span class="text-red-500">*</span></label>
                            <div class="relative multi-select-dropdown">
                                <div class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 cursor-pointer flex items-center justify-between" id="fromLocation1Dropdown">
                                    <div class="selected-options" id="selectedFromLocations1"></div>
                                    <span class="text-gray-400 ml-2" id="fromLocation1Placeholder">Select locations</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="dropdown-options bg-white border border-gray-300 rounded-md mt-1 shadow-lg" id="fromLocation1Options">
                                    <div class="p-2">
                                        <input type="text" placeholder="Search..." class="w-full px-2 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 mb-2">
                                        <div class="options-container">
                                            <!-- Location options will be inserted here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <label for="toLocation1" class="block text-sm font-medium text-gray-700 mb-1">To 1<span class="text-red-500">*</span></label>
                            <div class="relative multi-select-dropdown">
                                <div class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 cursor-pointer flex items-center justify-between" id="toLocation1Dropdown">
                                    <div class="selected-options" id="selectedToLocations1"></div>
                                    <span class="text-gray-400 ml-2" id="toLocation1Placeholder">Select locations</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="dropdown-options bg-white border border-gray-300 rounded-md mt-1 shadow-lg" id="toLocation1Options">
                                    <div class="p-2">
                                        <input type="text" placeholder="Search..." class="w-full px-2 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 mb-2">
                                        <div class="options-container">
                                            <!-- Location options will be inserted here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <label for="fromLocation2" class="block text-sm font-medium text-gray-700 mb-1">From 2</label>
                            <div class="relative multi-select-dropdown">
                                <div class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 cursor-pointer flex items-center justify-between" id="fromLocation2Dropdown">
                                    <div class="selected-options" id="selectedFromLocations2"></div>
                                    <span class="text-gray-400 ml-2" id="fromLocation2Placeholder">Select locations</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="dropdown-options bg-white border border-gray-300 rounded-md mt-1 shadow-lg" id="fromLocation2Options">
                                    <div class="p-2">
                                        <input type="text" placeholder="Search..." class="w-full px-2 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 mb-2">
                                        <div class="options-container">
                                            <!-- Location options will be inserted here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <label for="toLocation2" class="block text-sm font-medium text-gray-700 mb-1">To 2</label>
                            <div class="relative multi-select-dropdown">
                                <div class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 cursor-pointer flex items-center justify-between" id="toLocation2Dropdown">
                                    <div class="selected-options" id="selectedToLocations2"></div>
                                    <span class="text-gray-400 ml-2" id="toLocation2Placeholder">Select locations</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="dropdown-options bg-white border border-gray-300 rounded-md mt-1 shadow-lg" id="toLocation2Options">
                                    <div class="p-2">
                                        <input type="text" placeholder="Search..." class="w-full px-2 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 mb-2">
                                        <div class="options-container">
                                            <!-- Location options will be inserted here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-4">
                    <button type="button" id="cancelBtn" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400">
                        Cancel
                    </button>
                    <button type="submit" id="saveBtn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400">
                        Save
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Google Sheet Configuration
        const SHEET_ID = '16dH0QCUyKd5fpM_0P4riOgF3n8COrhruSN0HbXau3pI';
        const API_KEY = 'AIzaSyBlha6kRb9lO7g3Id1wcD96QFYmQS7Kwow';
        
        // Configuration for dropdown data
        const dropdownConfig = {
            vehicleType: {
                sheetName: 'Dropdown',
                column: 'C', // Vehicle Type is in Column C
                element: '#vehicleTypeOptions .options-container',
                placeholder: '#vehicleTypePlaceholder',
                selectedContainer: '#selectedVehicleTypes',
                dropdown: '#vehicleTypeDropdown',
                options: '#vehicleTypeOptions',
                selected: []
            },
            fromLocations: {
                sheetName: 'Dropdown',
                column: 'A', // From locations (Category) are in Column A
                elements: [
                    {
                        element: '#fromLocation1Options .options-container',
                        placeholder: '#fromLocation1Placeholder',
                        selectedContainer: '#selectedFromLocations1',
                        dropdown: '#fromLocation1Dropdown',
                        options: '#fromLocation1Options',
                        selected: []
                    },
                    {
                        element: '#fromLocation2Options .options-container',
                        placeholder: '#fromLocation2Placeholder',
                        selectedContainer: '#selectedFromLocations2',
                        dropdown: '#fromLocation2Dropdown',
                        options: '#fromLocation2Options',
                        selected: []
                    }
                ]
            },
            toLocations: {
                sheetName: 'Dropdown',
                column: 'B', // To locations (Destination) are in Column B
                elements: [
                    {
                        element: '#toLocation1Options .options-container',
                        placeholder: '#toLocation1Placeholder',
                        selectedContainer: '#selectedToLocations1',
                        dropdown: '#toLocation1Dropdown',
                        options: '#toLocation1Options',
                        selected: []
                    },
                    {
                        element: '#toLocation2Options .options-container',
                        placeholder: '#toLocation2Placeholder',
                        selectedContainer: '#selectedToLocations2',
                        dropdown: '#toLocation2Dropdown',
                        options: '#toLocation2Options',
                        selected: []
                    }
                ]
            }
        };

        // Fetch data from Google Sheet for a specific column
        async function fetchColumnData(sheetName, column) {
            try {
                // Get the entire sheet data
                const response = await fetch(
                    `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${sheetName}?key=${API_KEY}`
                );
                const data = await response.json();
                
                if (data.values && data.values.length > 1) {
                    // Skip header row and get the specified column
                    const columnIndex = column.charCodeAt(0) - 'A'.charCodeAt(0);
                    const uniqueValues = new Set();
                    
                    for (let i = 1; i < data.values.length; i++) {
                        if (data.values[i][columnIndex]) {
                            uniqueValues.add(data.values[i][columnIndex]);
                        }
                    }
                    
                    return Array.from(uniqueValues).map(value => [value]);
                }
                return [];
            } catch (error) {
                console.error('Error fetching data:', error);
                return [];
            }
        }

        // Initialize dropdown with options
        function initializeDropdown(config, data) {
            const optionsContainer = document.querySelector(config.element);
            optionsContainer.innerHTML = '';

            data.forEach(item => {
                const option = document.createElement('div');
                option.className = 'flex items-center p-2 hover:bg-gray-100 cursor-pointer';
                option.innerHTML = `
                    <input type="checkbox" id="${item[0]}" value="${item[0]}" class="mr-2">
                    <label for="${item[0]}">${item[0]}</label>
                `;
                optionsContainer.appendChild(option);

                // Add event listener for checkbox
                const checkbox = option.querySelector('input[type="checkbox"]');
                checkbox.addEventListener('change', function() {
                    if (this.checked) {
                        config.selected.push(this.value);
                    } else {
                        const index = config.selected.indexOf(this.value);
                        if (index > -1) {
                            config.selected.splice(index, 1);
                        }
                    }
                    updateSelectedOptions(config);
                });
            });
        }

        // Update selected options display
        function updateSelectedOptions(config) {
            const selectedContainer = document.querySelector(config.selectedContainer);
            const placeholder = document.querySelector(config.placeholder);
            
            if (config.selected.length > 0) {
                selectedContainer.innerHTML = '';
                placeholder.style.display = 'none';
                
                config.selected.forEach(value => {
                    const selectedOption = document.createElement('div');
                    selectedOption.className = 'selected-option';
                    selectedOption.innerHTML = `
                        <span>${value}</span>
                        <button type="button" class="remove-option text-gray-500 hover:text-gray-700">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    `;
                    selectedContainer.appendChild(selectedOption);
                    
                    // Add event listener for remove button
                    const removeButton = selectedOption.querySelector('.remove-option');
                    removeButton.addEventListener('click', function() {
                        const index = config.selected.indexOf(value);
                        if (index > -1) {
                            config.selected.splice(index, 1);
                            updateSelectedOptions(config);
                            
                            // Update checkbox state
                            const checkbox = document.querySelector(`input[value="${value}"]`);
                            if (checkbox) {
                                checkbox.checked = false;
                            }
                        }
                    });
                });
            } else {
                selectedContainer.innerHTML = '';
                placeholder.style.display = 'inline';
            }
        }

        // Toggle dropdown visibility
        function setupDropdownToggle() {
            const dropdowns = document.querySelectorAll('.multi-select-dropdown');
            
            dropdowns.forEach(dropdown => {
                const toggler = dropdown.querySelector('[id$="Dropdown"]');
                const options = dropdown.querySelector('[id$="Options"]');
                const searchInput = options.querySelector('input[type="text"]');
                
                toggler.addEventListener('click', function() {
                    options.classList.toggle('active');
                    
                    if (options.classList.contains('active')) {
                        searchInput.focus();
                    }
                });
                
                // Search functionality
                searchInput.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const allOptions = options.querySelectorAll('.options-container div');
                    
                    allOptions.forEach(option => {
                        const optionText = option.textContent.toLowerCase();
                        if (optionText.includes(searchTerm)) {
                            option.style.display = 'flex';
                        } else {
                            option.style.display = 'none';
                        }
                    });
                });
                
                // Close dropdown when clicking outside
                document.addEventListener('click', function(event) {
                    if (!dropdown.contains(event.target)) {
                        options.classList.remove('active');
                    }
                });
            });
        }

        // Form submission
        document.getElementById('vendorForm').addEventListener('submit', function(event) {
            event.preventDefault();
            
            // Get form data
            const formData = {
                vendorName: document.getElementById('vendorName').value,
                officeLocation: document.getElementById('officeLocation').value,
                contactNumber: document.getElementById('contactNumber').value,
                alternateNumber: document.getElementById('alternateNumber').value,
                scanPodNumber: document.getElementById('scanPodNumber').value,
                accountantNumber: document.getElementById('accountantNumber').value,
                vendorStatus: document.querySelector('input[name="vendorStatus"]:checked').value,
                vehicleTypes: dropdownConfig.vehicleType.selected,
                fromLocations1: dropdownConfig.fromLocations.elements[0].selected,
                toLocations1: dropdownConfig.toLocations.elements[0].selected,
                fromLocations2: dropdownConfig.fromLocations.elements[1].selected,
                toLocations2: dropdownConfig.toLocations.elements[1].selected
            };
            
            console.log('Form data:', formData);
            
            // Here you would typically send the data to a server
            alert('Form submitted successfully!');
        });

        // Cancel button
        document.getElementById('cancelBtn').addEventListener('click', function() {
            if (confirm('Are you sure you want to cancel? All entered data will be lost.')) {
                document.getElementById('vendorForm').reset();
                
                // Reset selected items
                dropdownConfig.vehicleType.selected = [];
                updateSelectedOptions(dropdownConfig.vehicleType);
                
                dropdownConfig.fromLocations.elements.forEach(config => {
                    config.selected = [];
                    updateSelectedOptions(config);
                });
                
                dropdownConfig.toLocations.elements.forEach(config => {
                    config.selected = [];
                    updateSelectedOptions(config);
                });
            }
        });

        // Initialize the application
        async function init() {
            // Fetch vehicle types (Column C)
            const vehicleTypes = await fetchColumnData(dropdownConfig.vehicleType.sheetName, dropdownConfig.vehicleType.column);
            initializeDropdown(dropdownConfig.vehicleType, vehicleTypes);
            
            // Fetch from locations (Column A - Category)
            const fromLocations = await fetchColumnData(dropdownConfig.fromLocations.sheetName, dropdownConfig.fromLocations.column);
            
            // Initialize from locations
            dropdownConfig.fromLocations.elements.forEach(config => {
                initializeDropdown(config, fromLocations);
            });
            
            // Fetch to locations (Column B - Destination)
            const toLocations = await fetchColumnData(dropdownConfig.toLocations.sheetName, dropdownConfig.toLocations.column);
            
            // Initialize to locations
            dropdownConfig.toLocations.elements.forEach(config => {
                initializeDropdown(config, toLocations);
            });
            
            // Setup dropdown toggle behavior
            setupDropdownToggle();
        }

        // Start the application
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>